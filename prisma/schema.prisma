// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

enum UserRole {
  GUEST
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole         @default(GUEST)
  verified      Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
 model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

//Jobs category - Ajliin zartai holbootoi modeluud
model JobCategory{
  id Int @id @default(autoincrement())
  name String
  description String
  jobs Job[]
}

model Job {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  openingAt DateTime
  closingAt DateTime 
  name     String   @db.VarChar(255)
  description   String?
  jobLocation JobLocation? @relation(fields: [jobLocationId], references: [id])
  jobLocationId Int?
  organization Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?
  process Process?  @relation(fields: [processId], references: [id])
  processId Int? 
  jobCategory JobCategory? @relation(fields: [jobCategoryId], references: [id]) 
  jobCategoryId Int?
  application Application[]
}

model JobLocation {
  id Int @id @default(autoincrement())
  name String   @db.VarChar(255)
  job Job[]
}

model Organization {
   id Int @id @default(autoincrement())
   name String @db.VarChar(255)
   job Job[]
}

//Process category - process toi holbootoi heseg
model Step {
 id Int @id @default(autoincrement())
 name String @db.VarChar(255)
 processStep ProcessStep[]
 
}

model Process {
  id Int @id @default(autoincrement())  //Process table n songon shalgaruulaltin uil yawtsiig haruulna
  description String?
  processStep ProcessStep[]
  job Job[]
}
model ProcessStep{
  
  step Step @relation(fields: [stepId], references: [id])
  stepId Int
  process Process @relation(fields: [processId], references: [id])
  processId Int
  status String?
  @@id([stepId,processId])
}
//Application, Applicant and Documents heseg
model Applicant {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String
  phone String
  addressHome String
  addressPermanent String
  registerNumber String
  application Application[]
  picture Picture?
}
model Application {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  applicant Applicant @relation(fields: [applicantId], references: [id])
  applicantId Int
  job Job @relation(fields: [jobId], references: [id])
  jobId Int
  status String
 applicationDocument DocumentApplication[]
 jobHistory WorkHistory[]
  
}

model WorkHistory {
  id Int @id @default(autoincrement())
 application Application @relation(fields: [applicationId], references: [id])
  applicationId Int
  startDate DateTime
  endDate DateTime
  companyName String
  jobPosition String
}

model Document {
  id Int @id @default(autoincrement())
  name String
  path String
  applicationDocument DocumentApplication[]
}
model DocumentApplication {
  document Document @relation(fields: [documentId], references: [id])
  documentId Int
  application Application @relation(fields: [applicationId], references: [id])
  applicationId Int
   @@id([applicationId,documentId ])
}
model Picture {
  id Int @id @default(autoincrement())
  name String
  path String
  applicant Applicant @relation(fields: [applicantId], references: [id])
  applicantId Int @unique
}

//Recruiters Application Evaluation and Status 
 

//Test and interviews - Shaardlagatai bol uusgeh !!!